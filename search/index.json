[{"content":"后台 shell 常驻工具 为什么使用 tmux 在我们日常使用 shell 运行命令的时候可能我们是使用 ssh 链接的服务器。而当 ssh 断开的时候终端也会随之中断。在 ubuntu 系统中我们可以使用 screen 来让 shell 命令挂在后台运行。而 tmux 作为 screen 的上位替代则比 screen 带来了更多的功能。\n安装 tmux # ubuntu sudo apt install tmux 使用 tmux 启动 tmux\n不带参数执行此命令会自动创建一个新的 session(在用户不主动关闭的情况在 session 即使在 tmux 关闭后仍然会继续运行) tmux 分屏:\n左右分屏: \u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + % \u0026quot; 上下分屏: \u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + \u0026quot; \u0026quot; 切换焦点（当你需要切换同一个 session 中不同的窗口时）\n\u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + \u0026ldquo;\u0026lt;方向键\u0026gt;\u0026rdquo; 创建新的 window: \u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + c \u0026quot;\n切换 window: \u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + \u0026quot;\n[TIPS] 一个 session 可以包括多个 windows\n退出 tmux: \u0026ldquo;ctrl\u0026rdquo; + \u0026quot; b + d \u0026quot;\n列出 session\ntmux ls 恢复 tmux: tmux a\u0026#34; 删除 session: tmux kill-session -t \u0026lt;session_name\u0026gt; tmux 配置文件 进入配置文件 nano ~/.tmux.conf 开启鼠标调整窗口大小的支持: \u0026ldquo;set -g mouse on\u0026rdquo;\n更改快捷键: \u0026ldquo;set -g prefix C-s\u0026rdquo;(意思是将原本用 ctrl+b 的快捷键改为用 ctrl+s)\n","date":"2025-08-06T03:08:51+08:00","image":"https://Gzmomo001.github.io/p/tmux/tmux_hu_38f19a40a0caca56.png","permalink":"https://Gzmomo001.github.io/p/tmux/","title":"Tmux"},{"content":"软连接 在系统中我们往往可能需要在一个项目中使用项目之外的一些文件，但是这个文件又不在这项目的根目录在。大部分人往往都选择直接将需要的文件拷贝到项目的路目中。但是这样既浪费时间又浪费系统的存储空间。尔软连接的出现就是为了解决这一问题。我们可以直接通过命令创建一个软连接。让目标文件或者文件夹的替身出现在我们的项目目录下。这样我们就可以在不使用绝对路径的情况下使用该路径了。\n如何使用软连接（ln 在 linux 中软连接的是由\u0026rsquo;ln\u0026rsquo;这一指令完成的。\n在 linux 我们可以使用\u0026rsquo;man ln\u0026rsquo;就能查看 ln 的使用手册 这里列举一些常用的\u0026rsquo;ln\u0026rsquo; 命令\n# Create a symbolic link to a file or directory: # 会在路标路径下创建一个原路径同名的文件或者文件夹 ln --symbolic /path/to/file_or_directory path/to/symlink #Overwrite an existing symbolic link to point to a different file: ln --symbolic --force /path/to/new_file path/to/symlink # Create a hard link to a file: ln /path/to/file path/to/hardlink # Delete a symbolic link: rm path/to/symlink 如果链接是相对路径，那这个相对是路径应该是相对于软连接目标目录的路径 ###官方文档链接\n","date":"2025-07-31T15:38:14+08:00","image":"https://Gzmomo001.github.io/p/soft_links/link_hu_7de80d1bc2b06914.png","permalink":"https://Gzmomo001.github.io/p/soft_links/","title":"Soft_links"},{"content":"如何正确的打开文献阅读之路 ","date":"2025-06-30T23:02:15+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/how2readarticle/","title":"How2ReadArticle"},{"content":"java 环境 ✅ 本教程的所有内容都是基于 java 环境已经安装好的前提下. 具体的教程可以去网上搜索. 根据自己要玩的 mc 版本安装适合版本的 java, 如果不知道安装哪个版本可以问一下 chat 老师. 本教程基于 Java21. 如果没有特殊需求安装 JRE 版本即可.\n2. 安装好之后验证 java 是否成功安装并设置好了环境变量. java --version 2. 如何加入我的模组服务器(傻瓜版)‼️ 首先最好先确认系统安装了 Java21, 点击这里查看如何确认. 下载整合包 整合包链接(一键启动版):\nWKU 校园网(windows)版本\nWKU 校园网(mac/linux 版)\nHCML 整合包导入版(教程见本文后面的部分)\n安装(新) 解压下载的整合包. 启动整合包: win: 双击整合包中我的世界图标的文件即可. mac: 打开终端, 在终端中进入整合包文件夹, 输入下面的指令. java -jar HMCL-3.6.12.jar 加入 等待游戏安装完成后登陆自己的账号 启动游戏, 在多人游戏中添加服务器地址后就能加入我的服务器啦 🥰: 校园 VPN 网络地址(推荐, 稳定速度快, 需要先连接 WKU—VPN 网络) 192.169.51.21:6000 樱花内网穿透(备用) frp-mix.com:34068 如何加入远程 MC 服务器 加入我的服务器直接跳转至整合包加入章节即可, 点击这里跳转\n安装 MC 启动器: 在市面上有很多款 MC 的启动器, 现在最常见的启动器就是官方启动器, 和 HMCL 启动器. 第三方启动器不代表不需要 MC 账号, 账号怎么获得这里我相信网上已经提供了很多方法.\n这里提供 HMCL 启动器的链接.\n下载与服务器对应的版本: HMCL 启动器下载好之后需要先选择要下载的版本.\n安装服务器要求的mod: 当你没有安装需要的 mod 的时候, 在进入服务器之前你会看到服务器要求你安装的包.\n模组安装的途径:\n使用 HMCL 自带的模组安装工具安装\n在forge 网站中下载模组之后吧jar文件移动到游戏的mod文件夹下\n光影安装:\n首先确保现在的游戏版本安装了 OptFine 光影管理工具. 在modrinth 官网可以下载喜欢的光影包. 加入服务器: 点击多人游戏, 然后添加服务器. 输入服务器的 IP 和端口. 1. 如何加入我的模组服务器 建议直接使用后面的整合包安装, 更稳定也更方便. 安装 1.18.2+forge 40.3.0 版本 点击下载 选择18.2+forge 40.3.0版本\n安装模组 下载我的模组和材质包. 对于在 WKU 的同学, 链接学校的 VPN 网络后可以使用这个链接下载.\n阿里云盘模组链接. 这里阿里云盘无法分享 zip, 所以没有材质包, 但是不影响启动.\n压缩包下载后解压, 会有两种文件: zip, jar. zip 对应的是材质包, jar 是模组. 点击版本管理 在模组拦选择添加模组, 选择刚刚下载的包里的jar文件. 安装光影 在浏览中选择打开资源包文件夹, 然后添加下载文件夹中的zip文件. 整合包安装游戏(不带启动器版本) 该方法已淘汰, 请勿使用该方法\n使用 HMCL 的整合包安装功能, 直接一次性安装好所有模组和材质包.\n因为阿里云盘不支持分享 zip 文件, 需要通过这个方法安装的需要联系我. 可以通过邮件或者其他方式发给你.\n点击安装整合包 从本地安装整合包, 并选择下载好的 zip 整合包.\n如何搭建基于 forge 的 MC 服务器 为什么使用 forge 搭建 很简单, forge 作为老牌的 mod 管理工具, 对很多 mods 兼容性都很好 如果输出了版本号则代表 java 已经安装好了.\n下载 forge 服务器安装包 点击链接进入网页. 选择版本. 点击 Installer 安装稳定版 下载完成之后看到 jar 结尾的文件说明成功下载. 安装服务器 这里以 linux 的 bash 终端为例(window cmd 同理).\n打开 bash 并进入到你的服务器安装目录下. 通过 java 安装服务器 java -jar \u0026lt;下载好的jar安装器文件名\u0026gt; --installServer # example java -jar forge-1.18.2-40.3.0-installer.jar --installServer 在终端输入文件名的时候需要加上后缀\n安装的过程会收到网络的影响, 请耐心等待\n初始化服务器 安装好之后在安装目录下会出现 run 启动脚本, 我们需要先运行一次脚本. ./run.sh # 如果是windows, 就运行 run.bat 初始化完成之后我们需要同意服务器的协议.\n打开eula.txt 讲false改为true 再次运行启动脚本. 此时如果看到 log 中显示服务器成功启动, 则说明我们的服务器成功跑起来了.\n配置服务器 当服务器成功启动之后安装目录下会出现一个server.properties文件. 这个文件中包含了大部分游戏的规则如游戏模式难度等. 每条配置对应是什么意思可以在MCWIKI中查看.\n对于要使用模组的服务器, 我们需要讲服务器的内存设置为至少 4G.\n打开user_jvm_args.txt文件 根据文件中的提示设置自己服务器的内存. 局域网外远程联机(内网穿透) 这里使用 cploar 的方案. 这个是一个提供内网穿透服务的平台.\n安装 cploar 服务 官网链接\n视频教程请跳转至 9分钟开始观看.\n内网穿透映射 以 cpolar dashboard 举例.\n在 cploar 服务启动之后在网页中打开服务器的9200端口. 设置映射. 仿照图片中的设置配置映射.\n对于 forge, 服务器开启后默认端口为 25565, 如果想修改监听端口可以修改 properties 里的端口设置.\n创建完成之后在在线列表的地方就能找到服务器地址.\ne.g. 对于 tcp://11.tcp.vip.cpolar.cn:11627\n服务器地址就是 tcp://11.tcp.vip.cpolar.cn:11627\n","date":"2025-06-09T14:01:06+08:00","image":"https://Gzmomo001.github.io/p/mc%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-%E5%8A%A0%E5%85%A5/image_hu_821f460713bd3784.png","permalink":"https://Gzmomo001.github.io/p/mc%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-%E5%8A%A0%E5%85%A5/","title":"MC服务器搭建 \u0026 加入"},{"content":"前言 本教程基于 ubuntu, 请确保的 ubuntu 系统大于 20. 这里参考阿里提供的方案\nsudo apt install vino ","date":"2025-06-08T22:16:17+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/ubuntu%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/","title":"ubuntu远程桌面"},{"content":" 这个视频主要是基于 word 文档来制作简历.\n","date":"2025-06-04T18:19:09+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/%E5%A6%82%E4%BD%95diy%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%AE%80%E5%8E%86/","title":"如何diy自己的工作简历"},{"content":"视频源 观后感 很多情况下你自己的话语很大程度上暗示你自己的思维方式. 比如当你觉得现在的就业环境不好的时候, 如果你说的是“现在的就业环境好差, 导致我们找不到工作”, 这样就会暗示自己把原因归结于外界, 从而减少了对自己的思考. 但如果我们把自己的话改成“现在就业市场环境不好, 这对我们来说是一个挑战.” 这样我们就更倾向于想办法去解决这个现有的问题.\n语言的边界, 就是世界的边界\n\u0026ndash;维特根斯坦\n两大语言陷阱 标签化: 当我们用标签简单的去判断一个人或者一件事情的时候, 我们往往就会丢失对这个人或者这个事情全面多维度的判断. 如何改变: 当我们下次想要贴标签的时候, 我们不妨想想, 这个对象跟标签之间有没有什么区别. 被动化(我没有办法): 当我们遇到了一些问题的时候, 下意识说出我没办法, 很大程度上就是在扼杀我们对这个事情的掌控感和积极性. 如何改变: 用“我选择”代替“我没办法”, 比如“没钱我没办法买”改为“这个东西的性价比不够高, 所以我不买” 如何用语言提高我们大脑的活性 学习聪明人说话 找你认为你想成为的那种人, 学习模仿他们讲话的方式. 很多时候就会潜移默化的影响自己的思维方式. 并且很多情况下, 你在描述一个事情的时候, 你的词汇约丰富, 表达越多样很大程度上会增强你的思维深度.(所以如果要用英文表达还是得多背单词)\n适当沉默 虽然很多时候会表达意味着思维更加灵活, 但人类的本性就是会给自己说过的话合理化解释, 这就导致了脑子被嘴巴牵着走的情况. 所以有些时候, 在交流当中适当的沉默和留白就是给我们大脑一个思考的机会. 能解决问题固然聪明, 但能找到关键根本的问题并解决的才是智慧.\n筌者所在鱼, 得鱼而忘筌\n言者所在意, 得意而忘言.\n不要太执着于手段本身, 而是要关注我们的目标和本质.\n续写发牢骚 继承上述语言就像是我们思维的指针, 很多时候最好的话会影响我们的思维. 所哟当我们发完牢骚也就是提出问题的时候, 我们可以再补上一句我们的解决方案, 或者暗示我们要去解决这个问题. 那么我们的思维就会延续为怎么解决这个问题上, 而不是对问题本身执着太多.\n语言不是世界的反应, 而是思想的工具.\n被篡改的语言不是无用的, 而是危险的\n人类唯一的思想自由就在鱼警觉语言, 因为语言无法污染世界, 但是却能污染思想.\n","date":"2025-05-29T02:41:58+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E4%BD%A0%E7%9A%84%E6%80%9D%E7%BB%B4/","title":"语言如何影响你的思维"},{"content":"前言 回顾上上个章节当中讲到的遗产(inheritance)的概念, 我们可以通过创建一个类的子类来继承其 datafield 和 methods. 并且这个类也可以单独创建实例. 而抽象类就是一种特殊的父类.\n抽象类 就跟刚刚讲到的一样, 抽象类其实就是一个特殊的父类, 作为一个父类它无法实例化. 而是要通过创建其子类然后才能实例化.\n为什么我们要使用抽象类, 而不是把所有类都写成可实例化的呢 就如之前章节提到的方法重写签名一样，其实抽象类本身改为可实例化的类并不会影响子类的继承和代码的运行。🔧 它的存在主要是为了代码规范性的问题。\n📝 抽象类就像是一个模板或者标准，指引着子类的定义。比如课程就是一个抽象类。📚 课程本身并没有意义，但是不同种类的课程都会有一些共同的属性和方法，比如：\n⏰ 课程时间 📍 课程地点 👨‍🎓 上课学生 👩‍🏫 指导老师 并且它们都可以进行以下操作：\n🏫 上课 🛑 下课 ➕ 添加学生 ➖ 踢出学生 🔄 更换指导老师 💡 以上例子展示了抽象类的子类都有共同的 datafield 和 methods。使用抽象类作为模板可以：\n✅ 大大减少代码冗余 ⚡ 加速开发效率 代码示例 其实抽象类的定义就只需要在可实例化的类签名添加abstract关键词就好了\nabstract class Course\u0026lt;T\u0026gt; { protected String courseTime; protected String courseLocation; protected List\u0026lt;T\u0026gt; students; //这里是一个泛型后面的章节会提到 protected String instructor; public Course(String courseTime, String courseLocation, String instructor) { this.courseTime = courseTime; this.courseLocation = courseLocation; this.students = new ArrayList\u0026lt;\u0026gt;(); this.instructor = instructor; } // 即使是抽象类也需要构造器 public abstract void startClass(); public abstract void endClass(); //这里是抽象类的一个特点, 可以只声明一种方法而不写其具体的实现. public void addStudent(T student) { students.add(student); } public void removeStudent(T student) { students.remove(student); } public void changeInstructor(String newInstructor) { this.instructor = newInstructor; } } 抽象类的子类 class ProgrammingCourse extends Course\u0026lt;String\u0026gt; { // 可以看到这里将String传入了泛型, 那父类中的对应位置就会编译为String public ProgrammingCourse(String courseTime, String courseLocation, String instructor) { super(courseTime, courseLocation, instructor); } @Override public void startClass() { System.out.println(\u0026#34;Programming class started at \u0026#34; + courseTime); } @Override public void endClass() { System.out.println(\u0026#34;Programming class ended at \u0026#34; + courseTime); } } 这里有一些课本中零碎的细节\n抽象类的子类必须要完成父类的抽象方法, 除非它自己也是抽象的. 📚 抽象类无法实例化(这是基本概念). 🛑 只有抽象类才能使用抽象方法. ✒️ 抽象子类可以将父类的非抽象方法重写为抽象方法. 🔧 抽象子类的父类可以是非抽象的. 🔄 虽然抽象类并不能实例化, 但是依然可以最为一种数据类型. 📊 generics | 范型的首次引入(大纲外) 范型是 java 中的一种机制, 它允许你可以对某些类的类型不做定义, 等到需要实例化类的时候再定义其类型.\n优势 泛型是在开发时才存在于源码中的，当我们编译时，范型会自动转换为我们使用的类型。这样，泛型在运行之前就能检测代码错误，并且提高代码效率. 💻🔍 提高代码的复用性，这里显而易见，不做过多解释. 🔄🔁 提高可读性和可维护性，我们不再需要针对不同的数据类型做调整. 📖🛠️ 限制 不能使用基本数据类型 🔥 范型没有数组, 所以如果要传入数组, 那就创建一个包含多个类的类. 如 class 包含 stus 类. 📦 范型无法实例化. 🚫 具体用法 已经包含在了上文的代码块中\ninterface | 接口 如果前面的抽象类概念都能理解的话，那么接口(interface)就更容易掌握了！👌\n💡 简单来说，接口就是一种特殊的抽象类，它有以下特点：\n只能包含静态常量(public static final) 方法默认都是抽象且公开的(public abstract) 不能包含普通成员变量 不能有构造器 🌰 举个栗子：接口就像是一个纯抽象的模板，只定义规范不实现细节。\n📌 重要提示\n🔄 静态方法特性：所有类中的静态方法都是类方法，无法被子类重写。 ⚠️ 尽量避免在子类中使用同名方法 ✅ 如果必须使用，建议直接通过类名调用（如ClassName.method()）而非实例名 🏗️ 接口类构造器：由于接口类只包含常量（public static final）和抽象方法，所以不需要定义构造器。 💡 接口本质上是一个纯抽象模板 🚫 与抽象类不同，接口完全不能包含任何实现细节（除非使用 default 方法） 如果我们要在接口中定义默认方法的实现怎么办 这个时候我们就可以使用default关键字定义这个方法的默认实现.\npublic interface A { default void doSomething(){ //doSomething } static void do(){ // implement } //静态方法一定要定义 } 接口的使用 public interface Animal { void makeSound(); void eat(); } class Dog implements Animal { @Override public void makeSound() { System.out.println(\u0026#34;Woof!\u0026#34;); } @Override public void eat() { System.out.println(\u0026#34;Dog is eating.\u0026#34;); } } native 关键字 这个关键字首次在第 13 章中出现 ✨。native是一个方法修饰符，主要用于：\n🔌 跨语言调用：允许 Java 代码调用其他语言(如 C/C++)编写的函数 ⚡ 性能优化：某些底层操作使用原生语言实现效率更高\n💡 使用场景举例：\n需要直接操作硬件或系统 API 时 需要极致性能优化的关键代码段 复用已有的原生语言库 📚 深入理解：由于涉及 JNI(Java Native Interface)技术，建议参考这篇详细资料\n","date":"2025-05-26T00:42:23+08:00","image":"https://Gzmomo001.github.io/java.png","permalink":"https://Gzmomo001.github.io/p/chapter13/","title":"Chapter13"},{"content":"情景 随着我们的代码复杂度的增长, 很多时候我们无法完全避免程序在运行的过程中出错. 很多时候会出现程序在执行某些不重要的代码的时候报错,然后整个程序直接停止. 整个项目的代码量过大导致使用 debug 功能修复代码的时候效率过低. 目的 帮助程序解决一些报错, 而不是让程序直接停止, 已提高容错率 当我们在程序中设计好错误处理的时候, 当程序报错的时候, 我们就更容易找到错误的原因, 提高开发效率 使用 if 来处理异常 if 语句是处理简单的异常的一种方式.\npublic static int quotient(int num1, int num2) { if(num2 == 0) { System.out.println(\u0026#34;Divisor cannot be zero\u0026#34;); System.exit(1); //这个代码可以直接让程序退出并返回1. } ··· } try catch 语句 这里引入一个新的语法, 这个语法的作用是, 当程序在执行 try 语句块中的代码的时候, 如果出现了异常, 那么程序会跳转到 catch 语句块中执行代码.\n建议直接将示例代码复制到 IDE 中进行测试, 这样可以帮助你更好的理解这个语法.\nclass QuotientWithException { public static int quotient(int numerator, int denominator) { if(denominator == 0) { throw new ArithmeticException(\u0026#34;Divisor cannot be zero\u0026#34;); //如果分母为零则抛出异常. } return numerator / denominator; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(\u0026#34;Enter two integers: \u0026#34;); int number1 = input.nextInt(); int number2 = input.nextInt(); try { int result = quotient(number1, number2); System.out.println(number1 + \u0026#34; / \u0026#34; + number2 + \u0026#34; is \u0026#34; + result); } catch(ArithmeticException ex) { System.out.println(ex.getMessage()); //如果catch到的是算术异常则打印方法中异常记录的消息. } catch(Exception ex) { System.out.println(\u0026#34;Exception: \u0026#34; + ex.getMessage()); //可以使用多个catch来捕获不同的错误 } finally{ System.out.println(\u0026#34;Finally\u0026#34;); //不管错误是否被catch抓取, 程序都会执行finally语句块中的代码. } //finally一般用于才捕获错误之后释放资源. System.out.println(\u0026#34;Execution continues\u0026#34;); } } Exception Types | 错误类型 在 Java 中， Throwable 是所有异常和错误的根类。所有通过 throw 抛出的异常必须继承自 Throwable 。其直接子类包括：\nError LinkageError 表示类之间的依赖关系出现问题 常见子类包括： NoClassDefFoundError - 类定义找不到 UnsatisfiedLinkError - 本地方法链接失败 ClassFormatError - 类文件格式错误 通常发生在类加载、链接或初始化阶段 VirtualMachineError 表示 JVM 本身出现严重问题 常见子类包括： OutOfMemoryError - 内存耗尽 StackOverflowError - 栈溢出 InternalError - JVM 内部错误 这些错误通常无法恢复，程序应该终止 栈溢出(Stack Overflow)是指程序调用栈的内存空间被耗尽的情况，属于一种运行时错误。主要特点包括：\n产生原因 ： 递归调用没有正确的终止条件 函数调用层次过深 局部变量占用过多栈空间 Exception ClassNotFoundException 当 JVM 尝试加载某个类但找不到该类的定义时抛出 常见场景： 使用 Class.forName()动态加载类时 类路径(Classpath)配置错误 依赖的 jar 包缺失 属于检查型异常(Checked Exception)，必须捕获或声明抛出 IOException 输入/输出操作失败时抛出 常见场景： 文件读写操作(FileNotFoundException 是其子类) 网络通信中断 流操作异常 也是检查型异 RuntimeException 运行时错误是比较重点的 Exception 类\nArithmeticException 算术运算错误，如除以零 常见场景： 整数除以零 浮点数除以零 浮点数的无穷大或 NaN IndexOutOfBoundsException 数组索引越界 常见场景： 访问数组元素时索引超出数组范围 数组长度为零 数组索引为负数 NullPointerException 尝试访问空对象的成员 常见场景： 对象未初始化 方法参数为 null 数组元素为 null IllegalArgumentException 传递给方法的参数无效 常见场景： 方法参数为 null 方法参数类型不匹配 方法参数值超出预期范围 More on Exception handling | 错误处理进阶 当我们我们定义的一个方法可能会抛出异常的时候, 我们可以在方法的声明中使用 throws 关键字来告诉调用者这个方法可能会抛出什么异常.\nmethod() throws Exception, ..., ExceptionN { if (an error occurs) { throw new Exception(); } } 当你我们使用 try catch 语句的时候, 如果要定义多个 catch, 那么前面的 catch 的异常类型必须是后面的异常类型的子类, 或者同级.\nRethrowing Exceptions | 重新抛出异常 当我们在某处代码中捕获到异常的时候, 但是在此处并无法处理异常, 或者想要在这里先记录异常信息, 方便维护. 我们就能在捕获到异常后, 进行一些操作后将异常重新抛出.\ntry { statements; } catch (TheException ex) { perform operations before exits; throw ex; } Defining Custom Exceptions | 自定义异常 当我们想要捕捉 java 中没有定义的异常的时候, 我们可以自定义异常. 我们只需要定一个类继承 Exception 类即可.\nclass MyException extends Exception { public MyException() { super(); } public MyException(String message) { super(message); } } The File Class | 文件类 导入类 import java.io.File; 类的构造 和 方法 File file = new File(pathname: String); // path 可以是一个文件的路径, 也可以是一个文件夹的路径. File file = new File(parent: String, child: String); // path 可以是一个文件的路径, 也可以是一个文件夹的路径. File file = new File(parent: File, child: String); // parent is file class 使用第一种的构造器的时候主要是创建的文件单一, 功能简单, 或者目录明确. 对于第二第三种构造器主要是用于需要在某一个目录下进行多次的文件编辑时使用. file.exists(); // + boolean file.isDirectory(); // + boolean file.isFile(); // + boolean file.length(); // + boolean file.getName(); // + String file.getPath(); // + String file.getParent(); // + String file.lastModified(); // + long file.length(); // + long file.listFiles(); // + File[] file.delete(); // + boolean file.renameTO(dest: File); // + boolean file.mkdir(); // + boolean file.mkdirs(); // + boolean 与mkdir不同的是, 如果父目录不存在, 该方法也会创建父目录. PrintWriter 类 导入类 和 构造 import java.io.PrintWriter; PrintWriter writer = new PrintWriter(file: File); // 使用File对象创建PrintWriter PrintWriter writer = new PrintWriter(fileName: String); // 使用文件名创建PrintWriter PrintWriter writer = new PrintWriter(outputStream: OutputStream); // 使用输出流创建PrintWriter method | 方法 writer.print(value: any); // 打印任意类型数据 writer.println(value: any); // 打印数据并换行 writer.printf(format: String, args: Object...); // 格式化输出 writer.flush(); // 强制刷新缓冲区 writer.close(); // 关闭流 writer.checkError(); // 检查是否有错误发生 有了这些知识, 结合之前学到了 Scanner 类, 我们只需要将构造器的参数改为 File 类传入 Scanner 类就能使用之前所学的方法.\nReading Data from the web 这里包含了一些爬虫知识\n暂时不看, 估计不是考试重点\n","date":"2025-05-25T15:21:54+08:00","image":"https://Gzmomo001.github.io/java.png","permalink":"https://Gzmomo001.github.io/p/chapter12/","title":"Chapter12"},{"content":"参考链接 博客教程 中文网字体库 本文以中文网字体库为例, 剩下的可以举一反三\n获取字体设置 打开中文网字体库找到自己喜欢的字体 复制字体链接, 以中文网为例, 你需要复制以下代码. \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://chinese-fonts-cdn.deno.dev/packages/dymh/dist/DouyinSansBold/result.css\u0026#34; /\u0026gt; 以及\nbody { font-family: \u0026#34;Douyin Sans\u0026#34;; font-weight: \u0026#34;700\u0026#34;; } 配置字体 在 /layouts/partials/head/custom.html 中将刚刚的link粘贴进去 在 /assets/scss/custom.scss 中加入 // 文章页字体 body, .article-content { font-family: \u0026#34;\u0026lt;字体名\u0026gt;\u0026#34;, sans-serif; font-weight: \u0026#34;\u0026lt;粗细\u0026gt;\u0026#34;; } // 标题字体 body, .article-title { font-family: \u0026#34;\u0026lt;字体名\u0026gt;\u0026#34;, sans-serif; font-weight: \u0026#34;\u0026lt;粗细\u0026gt;\u0026#34;; } // 首页字体 body, .article-page { font-family: \u0026#34;\u0026lt;字体名\u0026gt;\u0026#34;, sans-serif; font-weight: \u0026#34;\u0026lt;粗细\u0026gt;\u0026#34;; } 字体名就是刚刚找到的第二个信息里font-family字段后的字符串, 下面就是对应的文本粗细. 如果不同的部分想要设置不同的字体在前面的步骤就多复制几个字体链接进去, 然后在最后这里把对应的字体改进去即可. ","date":"2025-05-25T02:28:03+08:00","image":"https://Gzmomo001.github.io/hugo.jpeg","permalink":"https://Gzmomo001.github.io/p/stack-theme-hugo-%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/","title":"Stack theme hugo 字体设置"},{"content":"继承 和 多态(java) 这个章节是基于类的延伸\n子类和父类 在 java 中有一个关键字叫 \u0026rsquo;extends\u0026rsquo;，意思是扩展， 这个关键字可以定义一个类的延伸类, 并具有所有原先类的方法(method)和变量(data field)。\nfor example: 定义一个类叫 person, 那么他的子类就可以是学生, 老师, 员工等.\n这样定义有什么好处吗? 当你已经使用了一个类完成某项代码任务的时候, 有其他的代码也需要用到这个类 但是这个类中的某些东西方法需要改变, 或者有些变量需要增加的时候, 你就可以在不改变原来的类的情况下创建一个子类, 对子类进行修改来完成新的任务. 通过这样的方法可以大大减少代码的冗余.提高代码的复用性. 具体实现 public class Person { private String name; private int age; private String gender; public Person(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } } public class Student extends Person { private String major; public Student(String name, int age, String gender, String major) { super(name, age, gender); // 在这里, 我们的super keyword 的作用就是调用父类的构造器. this.major = major; } } 如果这里的构造器没有调用父类的构造器, 那么编译器会会在编译的时候在该构造器的最前面先调用父类的无参构造器. 当父类使用 final 关键字的时候, 则无法定义其子类 转型 在 Java 中，类型转换主要分为两种：向上转型（upcasting）和向下转型（downcasting）。 转型可以改变原有实例的 data field. 但同时也伴随着风险.\n向上转型（Upcasting） 向上转型是将子类类型转换为父类类型，这种转换是自动的、安全的。因为子类一定包含父类的所有特性。\nMethod: 如果子类重写方法则使用重写之后的方法. Data Field: 保留父类的变量, 但是不能使用子类的变量. 应用场景 当你需要子类的方法的时候但是却不需要子类的变量的时候. // 向上转型示例 Student student = new Student(\u0026#34;张三\u0026#34;, 20, \u0026#34;男\u0026#34;, \u0026#34;计算机科学\u0026#34;); Person person = student; // 自动向上转型 // 或者显式写法 Person person2 = (Person)student; // 效果相同 当子类想临时使用父类的某个方法的时候可以仿照这个例子调用: \u0026ldquo;((father)child).method();\u0026rdquo;\n向下转型（Downcasting） 能够向下转型的几种情况.\nnew 类的时候使用的是子类, 但是当作了父类来使用. 或者在继承类上转换, 例如: person -\u0026gt; faculty -\u0026gt; teacher 这三个类. 当 new 的类是 teacher, 但是被当作 person 使用的时候, 那 person 类就能转型为 faculty. // 向下转型示例 Person person = new Student(\u0026#34;李四\u0026#34;, 19, \u0026#34;女\u0026#34;, \u0026#34;数学\u0026#34;); // 首先向上转型 Student student = (Student)person; // 向下转型 // 错误的向下转型示例 Person person2 = new Person(\u0026#34;王五\u0026#34;, 25, \u0026#34;男\u0026#34;); Student student2 = (Student)person2; // 运行时会抛出 ClassCastException // 转型前错误检查能有效避免运行错误 if (person instanceof Student) { // instanceof这个关键字能检查实例是否属于某个指定的类. Student student = (Student)person; System.out.println(\u0026#34;专业：\u0026#34; + student.getMajor()); } else { System.out.println(\u0026#34;这个人不是学生\u0026#34;); } 关于 \u0026ldquo;instanceof\u0026rdquo; 关键字: 检查的是该类在创建时的 new 的类是否属于某个类链条上.\nNest class | 嵌套类(非大纲) 作用 可以避免多个顶层类. 可以将一些只在外部类中使用的类封装在外部类中. 比如, 只有学生这个类需要课程表这个类, 那么这个类就只需要在学生类下定义. 内部类 (Inner Class) 能够访问外部类的所有成员. public class OuterClass { private String msg = \u0026#34;Hello\u0026#34;; // 非静态内部类 class InnerClass { public void display() { // 可以访问外部类的所有成员 System.out.println(msg); } } } 静态嵌套类 (Static Nested Class) 静态嵌套类不能直接访问内部的静态成员. 当前示例代码中的静态子类就无法访问num这个变量. 静态嵌套类虽然无法访问外部类的非静态成员, 但是可以访问该类内部的成员. 比如示例代码中的a. public class OuterClass { private static String msg = \u0026#34;Hello\u0026#34;; private int num = 10; // 静态嵌套类 static class StaticNestedClass { int a = 10; public void display() { // 可以访问外部类的静态成员 System.out.println(msg); } } } Overriding Methods | 方法重写 当一个学生类想要调用toString方法输出自己的信息的时候, person类的toString方法可能并没有涉及到学生类新data field, 比如年纪, 学号等. 这个时候就是方法重写大展拳脚的时候了.\n在子类中, 我们可以使用@Override签名来重写父类的方法. 这样做的好处是: 拒绝冗余的方法定义: 我们可以在不变动父类方法的情况下创建一个新的方法来实现相同的功能. 但是父类的方法就会继承到子类中, 造成代码的冗余. 同时当我们调用方法的时候, 也会造成调用格式不统一的问题. class father{ void methodA{ System.out.println(\u0026#34;This is A\u0026#34;) } } class children{ @override // 其实这里不使用这个签名方法也能顺利重写, 但为了代码规范还是建议在重写的方法前添加这个签名 void methodA{ System.out.println(\u0026#34;This is also A\u0026#34;) } } 比如之前章节学的, 当我们使用wrapper class的时候, 不管是什么类型的类, 我们都可以使用相同的compareTo方法.\n方法重写的前提是父类的方法没有使用 final 关键字. 使用 final 关键字的方法无法被子类重写, 这样做可以防止一些关键的方法被错误的重写, 能让子类的代码更加规范.\nOverriding vs. Overloading 方法重写 方法重写是子类对与父类的方法的重新定义\n方法重载 方法重载是多个相同签名的方法, 但是在调用的时候会根据传入的参数类型和数量来决定使用哪个方法.\nObject Class | 对象类 在 java 中所有的类都是 object class 的子类\ntoString method 不考试的同学可以跳过本章节, 博主认为这个方法没有特别的作用, 了解一下就好.\n这是所有对象都包含的一个方法.\n调用后会显示一些关于这个类的信息. 信息的构成为\u0026lt;实例名称\u0026gt;@\u0026lt;哈希值\u0026gt;\n当你使用 print 直接打印的类的时候, 类就会自动调用这个方法然后返回字符串.\n多态 这个章节主要讲类可以作为一个参数传入方法中使用.\nDynamic Binding | 动态绑定 前文提到的方法签名统一的好处就体现在这里.\n当我们按照之前的代码规范重写代码, 保持方法签名的统一的时候. 我们就能在方法中使用相同的方法签名来调用不同类中相同功能的方法, 而不需要提前规定好方法只能接受哪种类. equals method 在原始的对象类中, 这个方法会对比对象的内存地址是否相同.\n实际中的作用 由于这个方法签名比较常用. 所以很多时候, 如果我们想要自定义某个类的该方法, 我们就会重写这个方法.\n== vs. equals 在 equals 方法没有被重写的时候, 我们有: \u0026lsquo;==\u0026rsquo; \u0026gt; \u0026rsquo;equals\u0026rsquo;的结论. 因为双等号除了能对比对象地址外还能比较基本变量的值.\n重写规范 当你重写这个方法的时候传入的参数一定是 object 类. 示例:\n@override public boolean equals(Object circle) { return this.radius == ((Circle)circle).radius; } The ArrayList Class 容量是动态的 创建 // 创建一个空的 ArrayList ArrayList\u0026lt;String\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); // 创建一个指定初始容量的 ArrayList ArrayList\u0026lt;Integer\u0026gt; list2 = new ArrayList\u0026lt;\u0026gt;(10); // 从其他集合创建 ArrayList ArrayList\u0026lt;Double\u0026gt; list3 = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(1.1, 2.2, 3.3)); \u0026lsquo;\u0026lt;\u0026gt;\u0026lsquo;是泛型, 目前知道知道括号里填什么类型的 wrapper 类, 这个数组就会存储什么类型的变量.\nadd // 在列表末尾添加元素 list.add(element); // 返回 boolean // 在指定位置插入元素 list.add(index, element); // void 返回 // 添加多个元素 list.addAll(collection); // 返回 boolean list.addAll(index, collection); // 返回 boolean visit // 获取指定位置的元素 Element element = list.get(index); // 获取第一次出现的位置 int index = list.indexOf(element); // 获取最后一次出现的位置 int lastIndex = list.lastIndexOf(element); modify // 替换指定位置的元素 Element oldElement = list.set(index, newElement); delete // 删除指定位置的元素 Element removedElement = list.remove(index); // 删除第一次出现的指定元素 boolean isRemoved = list.remove(element); // 删除所有元素 list.clear(); query // 检查是否包含某个元素 boolean contains = list.contains(element); // 检查是否为空 boolean isEmpty = list.isEmpty(); // 获取列表大小 int size = list.size(); transfer // 转换为数组 Object[] array = list.toArray(); String[] stringArray = list.toArray(new String[0]); // 获取子列表（视图） List\u0026lt;E\u0026gt; subList = list.subList(fromIndex, toIndex); sort // 排序（使用自然顺序） Collections.sort(list); // 使用自定义比较器排序 Collections.sort(list, comparator); // 反转列表 Collections.reverse(list); 这个类并不线程安全, 这意味着当多个线程同时操作这个类的时候可能会出现一些问题. 另外虽然这个类的容量的可变的, 但还是尽量在一开始就把容量定义好. 因为当类需要自己扩增容量的时候会影响性能.\n","date":"2025-05-24T21:05:41+08:00","image":"https://Gzmomo001.github.io/java.png","permalink":"https://Gzmomo001.github.io/p/chapter11/","title":"Chapter11"},{"content":"如何在本地搭建类似 gihub 的静态网站托管服务 前言 本博客的初衷是因为博主之前使用第三方的静态博客发现国内的网站对这些托管并不友好, 特别是 wx 经常会对我的博客域名封杀. 而且这个网页托管的速度也比较一般. 所以打算在本地搭建网页托管的服务, 使用内网穿透来实现外网访问. 这也算是一个填坑博客吧.🤓\nrequirements 掌握 git 的使用 需要先提前学习如何在使用如 github 的静态网站服务 有一台能够远程访问的服务器 现有的静态网站托管服务解决方案 GitHub Pages: 不支持 IPv6，网络经常受到干扰，而且只能用于公开仓库，私有的要钱。\nAzure Static Web App: 东亚地区的机房在香港，速度很快。除了不支持 IPv6 都挺好的。如果你能接受不支持 IPv6 访问，那推荐使用。\nCloudflare + GH Pages/Azure: Cloudflare 外号 Slowflare，曾经非常 slow，现在稍好了点，也支持 IPv6。我不用的原因是，挂上 CDN 可能会影响后面的托管的服务申请 SSL 证书。另一个原因是，中国大陆会连到 Cloudflare 美国节点（至少我家的电信是），如果用 Azure 香港托管网站，相当于绕路了。\nNetlify: Netlify 支持 IPv6，而且自己有全球 CDN，各方面都非常好，除了 Netlify 在中国大陆会解析到新加坡节点。据我观察，解析结果包含 Amazon 和 DigitalOcean 双栈共 4 个 IP 地址。Amazon 的机房延迟不错，但 DigitalOcean 会绕美国。也就是说，速度很大程度上取决于浏览器有没有“刚好”选对地址。\n目前网站的三个发布方式 github 静态网站托管 需要 vpn 才能查看 cloudflare 自动托管 有时候会连到国外的服务器导致访问缓慢. wx 需要申诉才能正常访问 本地服务器 web 服务, 然后使用内网传统实现公网访问. 速度快 不会被 wx 拦截 但是不能自动完成静态网页的部署 ","date":"2025-05-24T16:47:04+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/%E6%9C%AC%E5%9C%B0%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%89%98%E7%AE%A1/","title":"本地静态网站托管"},{"content":"不知好歹的博主 博主第二天要考高数, 现在还熬到快四点钟真的很有生活了.\n添加网页个性化鼠标指针 添加网页字体 链接改为双拦显示, 能显示的内容更多了 博客能显示最后的修改时间 添加浏览标题自动展开和折叠的功能, 文章末尾是测试, 可以忽略 引入加载动画的功能 - [ ] 加入小八看板娘\n添加返回顶部按钮 修复网站发布之后字体无法正常显示的问题 顺便记录一下周末的 TODO 2526 学完双独立变量的部分 2231 11, 12, 13 章节过一遍 2920 先看几个单元. 1 1 1\n2 2\n3 3\n2 1 1\n2 2\n3 3\n3 1 1\n2 2\n3 3\ntest 1 1\n2 2\n3 3\n","date":"2025-05-24T03:53:50+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/daliy_blog2025-05-24/","title":"Daliy_blog2025 05 24"},{"content":"日常记录 关于自己 昨天晚上搞博客搞的太上头, 一不小心又熬到 4.多 🥹. 然后今天睡到下午才起床, 真是得不偿失啊啊啊啊. 但我这种性格就是, 很多时候如果不把一件事做完就是不会停下来. 直到我把这件事做到某一个我想对满意的阶段的时候我可能才会开始休息. 简直就是先天牛马圣体.下周大大小小的考试就基本都考完了, 所以, 这几天再撑一下吧 🫠.\n关于考试 距离高数的期末考还有两天, 今天已经看了一整天的高数视频了. 也不知道自己学没学进去, 但聊胜于无嘛. Kari老师的视频确实感觉已经比国内大部分大学教授讲的都要好了. 逻辑比较清晰, 也都是按照思维导图来复习. 很适合我这种 visual memory 的人.\n目前为止的复习进度也还是比较紧张, 2231 专业课 java 我已经很久都没有看, 也没有 coding 了. 不过大部分的内容其实也都是记忆的东西. 这种一般花个半天时间就搞定了. 其实比较担心的还是我的两门数学考试, 和 2920 计算机系统架构. 数学考试的备考感觉是没有尽头的. 因为总会有更难的题型给你做, 你的熟练度也基本没有上线. 所以数学的复习还是不能太上头, 不然就像是时间黑洞一样吞噬你的时间.😇 很容易把其他事情耽误了.\nFinal project 期末的那个论文到目前的情况确实是差强人意了, 一开始我就低估了这个领域的强度和我们小组的执行能力. 布置出去的任务基本都要延迟几天才能完成, 这还是挺扰乱原本的计划的. 这个项目原本要做的实验也是时间的原因没有做成, 而且小组里似乎也只有我有这个代码能力. 本来的设想是我来完成我们项目的代码部分, 然后我的小组成员能帮我完成论文. 但我也没有提前了解他们对这领域的了解, 最后出于他们的执行力, 和了解程度. 我打算论文还是我自己来执手. 所以, 项目的代码部分就只能学期结束之后再继续推进了.\n今天最后的一点任务 当我开始写这个博客的时候已经快 12.了. 但事情总是做不完的. 今晚也不能再熬怎么晚了. 所以今晚就最后再完成两个任务吧.\n完善我的博客内容, 由于博客是昨天才匆忙搭建完的. 对这个项目的熟悉程度也不够. 希望今天能在完善博客的时候, 顺便也能熟悉一下这个项目的使用. 换头像 配置文件的配置过一遍 添加博客默认图片 完成我们论文的初稿, 即使论文目前还有很多漏洞. 但是船大难掉头, 目前先考虑论文写完, 先是一个完整的论文再说. 毕竟明晚就是 ddl 了, 也没有办法再去做论文的重构了.(发现 ddl 是第二天 12. 明天起来交作业) 好的又要吧论文拖到明天了 😅\n","date":"2025-05-22T23:40:31+08:00","image":"https://Gzmomo001.github.io/default.gif","permalink":"https://Gzmomo001.github.io/p/daliy_blog2025-05-22/","title":"Daliy_blog2025 05 22"},{"content":"Hugo 笔记 这里是我记录 Hugo 这个框架笔记的方法, 方便我以后忘记的时候能回来查看. 本 blog 会持续更新\n当然这里很多笔记也会是基于 stack 这个主题, 不过 hugo 大部分语法应该是通用的. 应该也有一定的参考价值.\n如何使用 hugo 框架快速搭建一个自己的博客. 安装 hugo 请根据自己的系统版本进入官网的安装链接安装 hugo. Windows Linux Mac 安装 git git 是一个版本控制工具, 如果你还不会使用, 建议先花点时间学习 git 的使用.\n这里提供一个 github 的 git 入门文档.\n这里是 git 安装的文档链接.\n检查 hugo 和 git 是否安装. hugo version git --version 如果成功显示了版本号, 则说明安装成功.\n顺着官网的文档建立你的第一个本地服务的博客 最后一次修改完博客并保存之后, 最好再运行一下\u0026quot;hugo -D\u0026quot;来刷新一下静态文件 当你最后最后一次修改完博客之后, 你需要提交你的修改. 具体过程参照教程 将你的本地 git 仓库 push 到 github 创建一个公共仓库, 并将其命名为\u0026quot;\u0026lt;你的用户名\u0026gt;.github.io\u0026quot;. 在 pubulic 静态网页文件夹下打开终端, 然后初始化一个新的 git 仓库. 提交你的第一个 commit. 然后连接你刚刚创建的远程仓库: \u0026ldquo;git remote add origin \u0026lt;你的远程仓库链接\u0026gt;\u0026rdquo;. 链接可以在刚刚创建仓库的地方找到. 创建主分支: \u0026ldquo;git branch main\u0026rdquo;. 最后将你的修改推送到远程仓库: \u0026ldquo;git push -u origin main\u0026rdquo;. 大工告成, 快去查看你的第一个博客吧. 直接在浏览器中输入\u0026quot;\u0026lt;你的用户名\u0026gt;.github.io\u0026quot;然后回车即可访问你的博客.\n创建新的博客 hugo new content/post/\u0026lt;博客名\u0026gt;.md hugo new content/post/daliy_blog$(date +%Y-%m-%d).md # 这个方法适用于日常博客的发表, 博客名会基于当前的日期创建 hugo new content/post/daliy_blog$(date +%Y-%m-%d)/index.md # 这样可以创建博客文件夹, 文件夹下可以放图片等内容 cp static/images/default.jpg content/post/daily_blog$(date +%Y-%m-%d)/ 刷新静态文件 hugo # 这个指令会在你的静态文件目录下生成静态文件, 然后你就可以在你的服务器上部署了 hugo server -D # 这个指令会打开本地hugo服务, 并在你有修改的时候自动刷新静态文件 stack 主题设置 点击这里进入官方文档\nb 站有个 up 已经发了 stack 主题比较详细的配置教程了, 所以我都在这个视频中学习\n大佬的静态博客, 这里有很多学习的链接 又发现一位大佬\nwidgets 配置文件下的这个部分是控制博客主页右侧的一些小组件的, 我觉得视频中的音乐播放器挺不错.\n博客的标题显示格式定义 add links To use this feature, add links section to frontmatter.\nThis page\u0026rsquo;s frontmatter:\nlinks: - title: GitHub description: GitHub is the world\u0026#39;s largest software development platform. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png - title: TypeScript description: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. website: https://www.typescriptlang.org image: ts-logo-128.jpg image field accepts both local and external images.\nTODO 配置评论区, 方案链接 - [ ] widgets 添加音乐播放器, 方案链接 添加博客更新记录 添加 macos 版本代码框, 参考博客. 圆框使用 AI 修改. 代码框自动折叠功能,参考. 在原有的基础上修改了一下样式, 更加美观. 修复字体问题, 已完成. 教程 返回顶部按钮 防止爬虫(https://blog.lufei.de/p/215/) - [ ] 博客最底部显示不正确. html 代码框显示不正常 添加四种注释样式, 参考博客 博客和 widget 按钮圆角设置 添加 TODOwidgets 添加通过标签和分类筛选博客, 将搜索框和归档结合在一起. 删除代码框的行号 添加 hugo 对 mermaid 思维导图解析的能力 返回顶部按钮 失败案例: 按照这个部分的操作发现按钮并不能正确的显示出来.几番操作无果之后转向 AI 求助. 最好 AI 给出了一个相对合理的替代方案.\n通过 js 直接画出返回顶部的图标 只需要在layouts/partials/footer/custom.html下将下面的代码粘贴进去即可\n\u0026lt;style\u0026gt; #backTopBtn { display: none; position: fixed; bottom: 30px; right: 375px; z-index: 99; cursor: pointer; width: 30px; height: 30px; background-color: #666; border-radius: 8px; color: white; text-align: center; line-height: 30px; font-size: 20px; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; /** * 滚动回顶部初始化 */ function initScrollTop() { let rightSideBar = document.querySelector(\u0026#34;.right-sidebar\u0026#34;); if (!rightSideBar) { return; } // 添加返回顶部按钮到右侧边栏 let btn = document.createElement(\u0026#34;div\u0026#34;); btn.id = \u0026#34;backTopBtn\u0026#34;; btn.innerHTML = \u0026#34;↑\u0026#34;; btn.onclick = backToTop; rightSideBar.appendChild(btn); // 滚动监听 window.onscroll = function () { // 当网页向下滑动 20px 出现\u0026#34;返回顶部\u0026#34; 按钮 if ( document.body.scrollTop \u0026gt; 500 || document.documentElement.scrollTop \u0026gt; 500 ) { btn.style.display = \u0026#34;block\u0026#34;; } else { btn.style.display = \u0026#34;none\u0026#34;; } }; } /** * 返回顶部 */ function backToTop() { window.scrollTo({ top: 0, behavior: \u0026#34;smooth\u0026#34; }); } initScrollTop(); \u0026lt;/script\u0026gt; ","date":"2025-05-22T23:29:01+08:00","image":"https://Gzmomo001.github.io/p/hugo_notes/1_hu_a8c0cdc2106d1564.jpeg","permalink":"https://Gzmomo001.github.io/p/hugo_notes/","title":"Hugo_notes"},{"content":"这个是我的第一个条博客(准确来说是第二条 hhh) 时间: 25 年 5 月 22 号 为什么我会想开一条博客呢? 其实最大的原因就是想装 B 了 hhhhhhh, 作为程序员怎么能没有自己的博客呢 😎. 其次现在到期末周了, 后天就要考试 😭, 明天还有论文的 DDL. 出于逃避的心理, 本人就开始找一些乱七八糟的事情干, 俗称: 不务正业. 不过也算是达成了一个小时后的梦想嘛 🥰. 不管这样做会对我的期末造成什么样的后果, 但现在说这个事情也迟了. 木已成舟, 那当然要好好庆祝一下啦 🎉.\n关于自己的博客网站 虽然是套壳了一个开源项目, 但总归是属于自己的博客. 这个博客网站的技术路线是使用Hugo的一个网站开源项目, 然后使用的主题是叫做tailbliss, 是个人感觉比较喜欢的怎么一个主题.\n服务器配置: CPU: 10900k es QTB2 内存: 32G ddr4 3200mhz GPU: 从教授那薅来的(特别指出) 3090 24G x2 网站发布: 网站的发布是采用内网穿透的方案, 因为服务器访问的人数也不多, 所以目前是没啥问题. 只希望不要被攻击了. 我可什么防御都不会啊啊啊啊啊啊. 之所以没有才用公网 IP 的方式主要原因是服务器在学校, 所以想要搞到公网 IP 比较困难. 综合来看还是内网穿透会比较容易实现也更灵活. 毁了, 好像内网穿透的地址解析不对, 虽然能直接通过链接访问博客, 但是点击链接会指向 localhost, 可能是转发有问题. 先暂时改称 github 的静态网页托管吧.🥹 终于搞定了也是, 本博客最后使用了 cloudfare 的静态网站托管功能, 几十分钟就搞定了, 非常方便.教程在这里: https://developers.cloudflare.com/pages/framework-guides/deploy-a-hugo-site/\n结语 说了怎么多, 其实就是自己课余的小玩具. 博主马上要去去洗澡, 然后开始复习(预习)高数了 😭. 最后感谢能看完本博客的同学, 希望你们都能活成自己心目中的样子.⭐️\n博主玩物丧志啊, 怎么马上天亮了. 速速发布 😭\n","date":"2025-05-22T04:08:44+08:00","image":"https://Gzmomo001.github.io/default.jpeg","permalink":"https://Gzmomo001.github.io/p/myfirstblog/","title":"Myfirstblog"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://Gzmomo001.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://Gzmomo001.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://Gzmomo001.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://Gzmomo001.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://Gzmomo001.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://Gzmomo001.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://Gzmomo001.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://Gzmomo001.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://Gzmomo001.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://Gzmomo001.github.io/p/emoji-support/","title":"Emoji Support"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://Gzmomo001.github.io/p/","title":""}]